# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/RTKBaseline.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class RTKBaseline(genpy.Message):
  _md5sum = "bd5852b76aa13136cec34a65089dfdb2"
  _type = "mavros_msgs/RTKBaseline"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# RTKBaseline received from the FCU.
# Full description: https://mavlink.io/en/messages/common.html#GPS_RTK
# Mavlink Common, #127and #128

std_msgs/Header header

uint32 time_last_baseline_ms
uint8 rtk_receiver_id
uint16 wn
uint32 tow
uint8 rtk_health
uint8 rtk_rate
uint8 nsats

uint8 baseline_coords_type 
uint8 RTK_BASELINE_COORDINATE_SYSTEM_ECEF = 0   # Earth-centered, earth-fixed
uint8 RTK_BASELINE_COORDINATE_SYSTEM_NED = 1    # RTK basestation centered, north, east, down

int32 baseline_a_mm
int32 baseline_b_mm
int32 baseline_c_mm
uint32 accuracy
int32 iar_num_hypotheses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  RTK_BASELINE_COORDINATE_SYSTEM_ECEF = 0
  RTK_BASELINE_COORDINATE_SYSTEM_NED = 1

  __slots__ = ['header','time_last_baseline_ms','rtk_receiver_id','wn','tow','rtk_health','rtk_rate','nsats','baseline_coords_type','baseline_a_mm','baseline_b_mm','baseline_c_mm','accuracy','iar_num_hypotheses']
  _slot_types = ['std_msgs/Header','uint32','uint8','uint16','uint32','uint8','uint8','uint8','uint8','int32','int32','int32','uint32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time_last_baseline_ms,rtk_receiver_id,wn,tow,rtk_health,rtk_rate,nsats,baseline_coords_type,baseline_a_mm,baseline_b_mm,baseline_c_mm,accuracy,iar_num_hypotheses

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RTKBaseline, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time_last_baseline_ms is None:
        self.time_last_baseline_ms = 0
      if self.rtk_receiver_id is None:
        self.rtk_receiver_id = 0
      if self.wn is None:
        self.wn = 0
      if self.tow is None:
        self.tow = 0
      if self.rtk_health is None:
        self.rtk_health = 0
      if self.rtk_rate is None:
        self.rtk_rate = 0
      if self.nsats is None:
        self.nsats = 0
      if self.baseline_coords_type is None:
        self.baseline_coords_type = 0
      if self.baseline_a_mm is None:
        self.baseline_a_mm = 0
      if self.baseline_b_mm is None:
        self.baseline_b_mm = 0
      if self.baseline_c_mm is None:
        self.baseline_c_mm = 0
      if self.accuracy is None:
        self.accuracy = 0
      if self.iar_num_hypotheses is None:
        self.iar_num_hypotheses = 0
    else:
      self.header = std_msgs.msg.Header()
      self.time_last_baseline_ms = 0
      self.rtk_receiver_id = 0
      self.wn = 0
      self.tow = 0
      self.rtk_health = 0
      self.rtk_rate = 0
      self.nsats = 0
      self.baseline_coords_type = 0
      self.baseline_a_mm = 0
      self.baseline_b_mm = 0
      self.baseline_c_mm = 0
      self.accuracy = 0
      self.iar_num_hypotheses = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IBHI4B3iIi().pack(_x.time_last_baseline_ms, _x.rtk_receiver_id, _x.wn, _x.tow, _x.rtk_health, _x.rtk_rate, _x.nsats, _x.baseline_coords_type, _x.baseline_a_mm, _x.baseline_b_mm, _x.baseline_c_mm, _x.accuracy, _x.iar_num_hypotheses))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 35
      (_x.time_last_baseline_ms, _x.rtk_receiver_id, _x.wn, _x.tow, _x.rtk_health, _x.rtk_rate, _x.nsats, _x.baseline_coords_type, _x.baseline_a_mm, _x.baseline_b_mm, _x.baseline_c_mm, _x.accuracy, _x.iar_num_hypotheses,) = _get_struct_IBHI4B3iIi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IBHI4B3iIi().pack(_x.time_last_baseline_ms, _x.rtk_receiver_id, _x.wn, _x.tow, _x.rtk_health, _x.rtk_rate, _x.nsats, _x.baseline_coords_type, _x.baseline_a_mm, _x.baseline_b_mm, _x.baseline_c_mm, _x.accuracy, _x.iar_num_hypotheses))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 35
      (_x.time_last_baseline_ms, _x.rtk_receiver_id, _x.wn, _x.tow, _x.rtk_health, _x.rtk_rate, _x.nsats, _x.baseline_coords_type, _x.baseline_a_mm, _x.baseline_b_mm, _x.baseline_c_mm, _x.accuracy, _x.iar_num_hypotheses,) = _get_struct_IBHI4B3iIi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_IBHI4B3iIi = None
def _get_struct_IBHI4B3iIi():
    global _struct_IBHI4B3iIi
    if _struct_IBHI4B3iIi is None:
        _struct_IBHI4B3iIi = struct.Struct("<IBHI4B3iIi")
    return _struct_IBHI4B3iIi
