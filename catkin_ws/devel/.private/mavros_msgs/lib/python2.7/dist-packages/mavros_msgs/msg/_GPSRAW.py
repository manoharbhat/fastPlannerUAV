# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/GPSRAW.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class GPSRAW(genpy.Message):
  _md5sum = "386bdffbf0a2d0436562395d516aa9bd"
  _type = "mavros_msgs/GPSRAW"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# FCU GPS RAW message for the gps_status plugin
# A merge of <a href="https://mavlink.io/en/messages/common.html#GPS_RAW_INT">mavlink GPS_RAW_INT</a> and 
# <a href="https://mavlink.io/en/messages/common.html#GPS2_RAW">mavlink GPS2_RAW</a> messages.

std_msgs/Header header
## GPS_FIX_TYPE enum
uint8 GPS_FIX_TYPE_NO_GPS     = 0    # No GPS connected
uint8 GPS_FIX_TYPE_NO_FIX     = 1    # No position information, GPS is connected
uint8 GPS_FIX_TYPE_2D_FIX     = 2    # 2D position
uint8 GPS_FIX_TYPE_3D_FIX     = 3    # 3D position
uint8 GPS_FIX_TYPE_DGPS       = 4    # DGPS/SBAS aided 3D position
uint8 GPS_FIX_TYPE_RTK_FLOATR = 5    # TK float, 3D position
uint8 GPS_FIX_TYPE_RTK_FIXEDR = 6    # TK Fixed, 3D position
uint8 GPS_FIX_TYPE_STATIC     = 7    # Static fixed, typically used for base stations
uint8 GPS_FIX_TYPE_PPP        = 8    # PPP, 3D position
uint8 fix_type      # [GPS_FIX_TYPE] GPS fix type

int32 lat           # [degE7] Latitude (WGS84, EGM96 ellipsoid)
int32 lon           # [degE7] Longitude (WGS84, EGM96 ellipsoid)
int32 alt           # [mm] Altitude (MSL). Positive for up. Note that virtually all GPS modules provide the MSL altitude in addition to the WGS84 altitude.
uint16 eph          # GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX
uint16 epv          # GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX
uint16 vel          # [cm/s] GPS ground speed. If unknown, set to: UINT16_MAX
uint16 cog          # [cdeg] Course over ground (NOT heading, but direction of movement), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
uint8 satellites_visible # Number of satellites visible. If unknown, set to 255

# -*- only available with MAVLink v2.0 and GPS_RAW_INT messages -*-
int32 alt_ellipsoid # [mm] Altitude (above WGS84, EGM96 ellipsoid). Positive for up.
uint32 h_acc        # [mm] Position uncertainty. Positive for up.
uint32 v_acc        # [mm] Altitude uncertainty. Positive for up.
uint32 vel_acc      # [mm] Speed uncertainty. Positive for up.
int32  hdg_acc      # [degE5] Heading / track uncertainty

# -*- only available with MAVLink v2.0 and GPS2_RAW messages -*-
uint8 dgps_numch    # Number of DGPS satellites
uint32 dgps_age     # [ms] Age of DGPS info

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  GPS_FIX_TYPE_NO_GPS = 0
  GPS_FIX_TYPE_NO_FIX = 1
  GPS_FIX_TYPE_2D_FIX = 2
  GPS_FIX_TYPE_3D_FIX = 3
  GPS_FIX_TYPE_DGPS = 4
  GPS_FIX_TYPE_RTK_FLOATR = 5
  GPS_FIX_TYPE_RTK_FIXEDR = 6
  GPS_FIX_TYPE_STATIC = 7
  GPS_FIX_TYPE_PPP = 8

  __slots__ = ['header','fix_type','lat','lon','alt','eph','epv','vel','cog','satellites_visible','alt_ellipsoid','h_acc','v_acc','vel_acc','hdg_acc','dgps_numch','dgps_age']
  _slot_types = ['std_msgs/Header','uint8','int32','int32','int32','uint16','uint16','uint16','uint16','uint8','int32','uint32','uint32','uint32','int32','uint8','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,fix_type,lat,lon,alt,eph,epv,vel,cog,satellites_visible,alt_ellipsoid,h_acc,v_acc,vel_acc,hdg_acc,dgps_numch,dgps_age

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GPSRAW, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fix_type is None:
        self.fix_type = 0
      if self.lat is None:
        self.lat = 0
      if self.lon is None:
        self.lon = 0
      if self.alt is None:
        self.alt = 0
      if self.eph is None:
        self.eph = 0
      if self.epv is None:
        self.epv = 0
      if self.vel is None:
        self.vel = 0
      if self.cog is None:
        self.cog = 0
      if self.satellites_visible is None:
        self.satellites_visible = 0
      if self.alt_ellipsoid is None:
        self.alt_ellipsoid = 0
      if self.h_acc is None:
        self.h_acc = 0
      if self.v_acc is None:
        self.v_acc = 0
      if self.vel_acc is None:
        self.vel_acc = 0
      if self.hdg_acc is None:
        self.hdg_acc = 0
      if self.dgps_numch is None:
        self.dgps_numch = 0
      if self.dgps_age is None:
        self.dgps_age = 0
    else:
      self.header = std_msgs.msg.Header()
      self.fix_type = 0
      self.lat = 0
      self.lon = 0
      self.alt = 0
      self.eph = 0
      self.epv = 0
      self.vel = 0
      self.cog = 0
      self.satellites_visible = 0
      self.alt_ellipsoid = 0
      self.h_acc = 0
      self.v_acc = 0
      self.vel_acc = 0
      self.hdg_acc = 0
      self.dgps_numch = 0
      self.dgps_age = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3i4HBi3IiBI().pack(_x.fix_type, _x.lat, _x.lon, _x.alt, _x.eph, _x.epv, _x.vel, _x.cog, _x.satellites_visible, _x.alt_ellipsoid, _x.h_acc, _x.v_acc, _x.vel_acc, _x.hdg_acc, _x.dgps_numch, _x.dgps_age))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 47
      (_x.fix_type, _x.lat, _x.lon, _x.alt, _x.eph, _x.epv, _x.vel, _x.cog, _x.satellites_visible, _x.alt_ellipsoid, _x.h_acc, _x.v_acc, _x.vel_acc, _x.hdg_acc, _x.dgps_numch, _x.dgps_age,) = _get_struct_B3i4HBi3IiBI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3i4HBi3IiBI().pack(_x.fix_type, _x.lat, _x.lon, _x.alt, _x.eph, _x.epv, _x.vel, _x.cog, _x.satellites_visible, _x.alt_ellipsoid, _x.h_acc, _x.v_acc, _x.vel_acc, _x.hdg_acc, _x.dgps_numch, _x.dgps_age))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 47
      (_x.fix_type, _x.lat, _x.lon, _x.alt, _x.eph, _x.epv, _x.vel, _x.cog, _x.satellites_visible, _x.alt_ellipsoid, _x.h_acc, _x.v_acc, _x.vel_acc, _x.hdg_acc, _x.dgps_numch, _x.dgps_age,) = _get_struct_B3i4HBi3IiBI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B3i4HBi3IiBI = None
def _get_struct_B3i4HBi3IiBI():
    global _struct_B3i4HBi3IiBI
    if _struct_B3i4HBi3IiBI is None:
        _struct_B3i4HBi3IiBI = struct.Struct("<B3i4HBi3IiBI")
    return _struct_B3i4HBi3IiBI
