# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/ADSBVehicle.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import std_msgs.msg

class ADSBVehicle(genpy.Message):
  _md5sum = "f71cc75a8e9e7b77d92f98d9a5315fd1"
  _type = "mavros_msgs/ADSBVehicle"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# The location and information of an ADSB vehicle
#
# https://mavlink.io/en/messages/common.html#ADSB_VEHICLE

# [[[cog:
# from pymavlink.dialects.v20 import common
#
# def decl_enum(ename, pfx='', bsz=8):
#     enum = sorted(common.enums[ename].items())
#     enum.pop() # remove ENUM_END
#
#     cog.outl("# " + ename)
#     for k, e in enum:
#         sn = e.name[len(ename) + 1:]
#         l = "uint{bsz} {pfx}{sn} = {k}".format(**locals())
#         if e.description:
#             l += ' ' * (40 - len(l)) + ' # ' + e.description
#         cog.outl(l)
#
# decl_enum('ADSB_ALTITUDE_TYPE', 'ALT_')
# decl_enum('ADSB_EMITTER_TYPE', 'EMITTER_')
# decl_enum('ADSB_FLAGS', 'FLAG_', 16)
# ]]]
# ADSB_ALTITUDE_TYPE
uint8 ALT_PRESSURE_QNH = 0               # Altitude reported from a Baro source using QNH reference
uint8 ALT_GEOMETRIC = 1                  # Altitude reported from a GNSS source
# ADSB_EMITTER_TYPE
uint8 EMITTER_NO_INFO = 0
uint8 EMITTER_LIGHT = 1
uint8 EMITTER_SMALL = 2
uint8 EMITTER_LARGE = 3
uint8 EMITTER_HIGH_VORTEX_LARGE = 4
uint8 EMITTER_HEAVY = 5
uint8 EMITTER_HIGHLY_MANUV = 6
uint8 EMITTER_ROTOCRAFT = 7
uint8 EMITTER_UNASSIGNED = 8
uint8 EMITTER_GLIDER = 9
uint8 EMITTER_LIGHTER_AIR = 10
uint8 EMITTER_PARACHUTE = 11
uint8 EMITTER_ULTRA_LIGHT = 12
uint8 EMITTER_UNASSIGNED2 = 13
uint8 EMITTER_UAV = 14
uint8 EMITTER_SPACE = 15
uint8 EMITTER_UNASSGINED3 = 16
uint8 EMITTER_EMERGENCY_SURFACE = 17
uint8 EMITTER_SERVICE_SURFACE = 18
uint8 EMITTER_POINT_OBSTACLE = 19
# ADSB_FLAGS
uint16 FLAG_VALID_COORDS = 1
uint16 FLAG_VALID_ALTITUDE = 2
uint16 FLAG_VALID_HEADING = 4
uint16 FLAG_VALID_VELOCITY = 8
uint16 FLAG_VALID_CALLSIGN = 16
uint16 FLAG_VALID_SQUAWK = 32
uint16 FLAG_SIMULATED = 64
# [[[end]]] (checksum: e35e77be43548bd572a3cb24138fc2fd)

std_msgs/Header header

uint32 ICAO_address
string callsign

float64 latitude
float64 longitude
float32 altitude 	# AMSL

float32 heading		# deg [0..360)
float32 hor_velocity	# m/s
float32 ver_velocity	# m/s

uint8 altitude_type	# Type from ADSB_ALTITUDE_TYPE enum
uint8 emitter_type	# Type from ADSB_EMITTER_TYPE enum

duration tslc		# Duration from last communication, seconds [0..255]
uint16 flags		# ADSB_FLAGS bit field
uint16 squawk		# Squawk code

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  ALT_PRESSURE_QNH = 0
  ALT_GEOMETRIC = 1
  EMITTER_NO_INFO = 0
  EMITTER_LIGHT = 1
  EMITTER_SMALL = 2
  EMITTER_LARGE = 3
  EMITTER_HIGH_VORTEX_LARGE = 4
  EMITTER_HEAVY = 5
  EMITTER_HIGHLY_MANUV = 6
  EMITTER_ROTOCRAFT = 7
  EMITTER_UNASSIGNED = 8
  EMITTER_GLIDER = 9
  EMITTER_LIGHTER_AIR = 10
  EMITTER_PARACHUTE = 11
  EMITTER_ULTRA_LIGHT = 12
  EMITTER_UNASSIGNED2 = 13
  EMITTER_UAV = 14
  EMITTER_SPACE = 15
  EMITTER_UNASSGINED3 = 16
  EMITTER_EMERGENCY_SURFACE = 17
  EMITTER_SERVICE_SURFACE = 18
  EMITTER_POINT_OBSTACLE = 19
  FLAG_VALID_COORDS = 1
  FLAG_VALID_ALTITUDE = 2
  FLAG_VALID_HEADING = 4
  FLAG_VALID_VELOCITY = 8
  FLAG_VALID_CALLSIGN = 16
  FLAG_VALID_SQUAWK = 32
  FLAG_SIMULATED = 64

  __slots__ = ['header','ICAO_address','callsign','latitude','longitude','altitude','heading','hor_velocity','ver_velocity','altitude_type','emitter_type','tslc','flags','squawk']
  _slot_types = ['std_msgs/Header','uint32','string','float64','float64','float32','float32','float32','float32','uint8','uint8','duration','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ICAO_address,callsign,latitude,longitude,altitude,heading,hor_velocity,ver_velocity,altitude_type,emitter_type,tslc,flags,squawk

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ADSBVehicle, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ICAO_address is None:
        self.ICAO_address = 0
      if self.callsign is None:
        self.callsign = ''
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.heading is None:
        self.heading = 0.
      if self.hor_velocity is None:
        self.hor_velocity = 0.
      if self.ver_velocity is None:
        self.ver_velocity = 0.
      if self.altitude_type is None:
        self.altitude_type = 0
      if self.emitter_type is None:
        self.emitter_type = 0
      if self.tslc is None:
        self.tslc = genpy.Duration()
      if self.flags is None:
        self.flags = 0
      if self.squawk is None:
        self.squawk = 0
    else:
      self.header = std_msgs.msg.Header()
      self.ICAO_address = 0
      self.callsign = ''
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.heading = 0.
      self.hor_velocity = 0.
      self.ver_velocity = 0.
      self.altitude_type = 0
      self.emitter_type = 0
      self.tslc = genpy.Duration()
      self.flags = 0
      self.squawk = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ICAO_address
      buff.write(_get_struct_I().pack(_x))
      _x = self.callsign
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d4f2B2i2H().pack(_x.latitude, _x.longitude, _x.altitude, _x.heading, _x.hor_velocity, _x.ver_velocity, _x.altitude_type, _x.emitter_type, _x.tslc.secs, _x.tslc.nsecs, _x.flags, _x.squawk))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tslc is None:
        self.tslc = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.ICAO_address,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.callsign = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.callsign = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.latitude, _x.longitude, _x.altitude, _x.heading, _x.hor_velocity, _x.ver_velocity, _x.altitude_type, _x.emitter_type, _x.tslc.secs, _x.tslc.nsecs, _x.flags, _x.squawk,) = _get_struct_2d4f2B2i2H().unpack(str[start:end])
      self.tslc.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ICAO_address
      buff.write(_get_struct_I().pack(_x))
      _x = self.callsign
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d4f2B2i2H().pack(_x.latitude, _x.longitude, _x.altitude, _x.heading, _x.hor_velocity, _x.ver_velocity, _x.altitude_type, _x.emitter_type, _x.tslc.secs, _x.tslc.nsecs, _x.flags, _x.squawk))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tslc is None:
        self.tslc = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.ICAO_address,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.callsign = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.callsign = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.latitude, _x.longitude, _x.altitude, _x.heading, _x.hor_velocity, _x.ver_velocity, _x.altitude_type, _x.emitter_type, _x.tslc.secs, _x.tslc.nsecs, _x.flags, _x.squawk,) = _get_struct_2d4f2B2i2H().unpack(str[start:end])
      self.tslc.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d4f2B2i2H = None
def _get_struct_2d4f2B2i2H():
    global _struct_2d4f2B2i2H
    if _struct_2d4f2B2i2H is None:
        _struct_2d4f2B2i2H = struct.Struct("<2d4f2B2i2H")
    return _struct_2d4f2B2i2H
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
