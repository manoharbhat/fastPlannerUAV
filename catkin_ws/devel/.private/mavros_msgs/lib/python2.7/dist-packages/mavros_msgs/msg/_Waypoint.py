# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/Waypoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Waypoint(genpy.Message):
  _md5sum = "7a0d2b53dcd6b7aff0aa748703e85e92"
  _type = "mavros_msgs/Waypoint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Waypoint.msg
#
# ROS representation of MAVLink MISSION_ITEM
# See mavlink documentation



# see enum MAV_FRAME
uint8 frame
uint8 FRAME_GLOBAL = 0
uint8 FRAME_LOCAL_NED = 1
uint8 FRAME_MISSION = 2
uint8 FRAME_GLOBAL_REL_ALT = 3
uint8 FRAME_LOCAL_ENU = 4

# see enum MAV_CMD and CommandCode.msg
uint16 command

bool is_current
bool autocontinue
# meaning of this params described in enum MAV_CMD
float32 param1
float32 param2
float32 param3
float32 param4
float64 x_lat
float64 y_long
float64 z_alt
"""
  # Pseudo-constants
  FRAME_GLOBAL = 0
  FRAME_LOCAL_NED = 1
  FRAME_MISSION = 2
  FRAME_GLOBAL_REL_ALT = 3
  FRAME_LOCAL_ENU = 4

  __slots__ = ['frame','command','is_current','autocontinue','param1','param2','param3','param4','x_lat','y_long','z_alt']
  _slot_types = ['uint8','uint16','bool','bool','float32','float32','float32','float32','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frame,command,is_current,autocontinue,param1,param2,param3,param4,x_lat,y_long,z_alt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Waypoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.frame is None:
        self.frame = 0
      if self.command is None:
        self.command = 0
      if self.is_current is None:
        self.is_current = False
      if self.autocontinue is None:
        self.autocontinue = False
      if self.param1 is None:
        self.param1 = 0.
      if self.param2 is None:
        self.param2 = 0.
      if self.param3 is None:
        self.param3 = 0.
      if self.param4 is None:
        self.param4 = 0.
      if self.x_lat is None:
        self.x_lat = 0.
      if self.y_long is None:
        self.y_long = 0.
      if self.z_alt is None:
        self.z_alt = 0.
    else:
      self.frame = 0
      self.command = 0
      self.is_current = False
      self.autocontinue = False
      self.param1 = 0.
      self.param2 = 0.
      self.param3 = 0.
      self.param4 = 0.
      self.x_lat = 0.
      self.y_long = 0.
      self.z_alt = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BH2B4f3d().pack(_x.frame, _x.command, _x.is_current, _x.autocontinue, _x.param1, _x.param2, _x.param3, _x.param4, _x.x_lat, _x.y_long, _x.z_alt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 45
      (_x.frame, _x.command, _x.is_current, _x.autocontinue, _x.param1, _x.param2, _x.param3, _x.param4, _x.x_lat, _x.y_long, _x.z_alt,) = _get_struct_BH2B4f3d().unpack(str[start:end])
      self.is_current = bool(self.is_current)
      self.autocontinue = bool(self.autocontinue)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BH2B4f3d().pack(_x.frame, _x.command, _x.is_current, _x.autocontinue, _x.param1, _x.param2, _x.param3, _x.param4, _x.x_lat, _x.y_long, _x.z_alt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 45
      (_x.frame, _x.command, _x.is_current, _x.autocontinue, _x.param1, _x.param2, _x.param3, _x.param4, _x.x_lat, _x.y_long, _x.z_alt,) = _get_struct_BH2B4f3d().unpack(str[start:end])
      self.is_current = bool(self.is_current)
      self.autocontinue = bool(self.autocontinue)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BH2B4f3d = None
def _get_struct_BH2B4f3d():
    global _struct_BH2B4f3d
    if _struct_BH2B4f3d is None:
        _struct_BH2B4f3d = struct.Struct("<BH2B4f3d")
    return _struct_BH2B4f3d
