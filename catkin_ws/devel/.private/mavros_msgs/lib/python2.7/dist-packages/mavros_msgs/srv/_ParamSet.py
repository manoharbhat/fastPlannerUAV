# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/ParamSetRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mavros_msgs.msg

class ParamSetRequest(genpy.Message):
  _md5sum = "4a17f346bc27984b348c799c674a04d9"
  _type = "mavros_msgs/ParamSetRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Request set parameter value

string param_id
mavros_msgs/ParamValue value

================================================================================
MSG: mavros_msgs/ParamValue
# Parameter value storage type.
#
# Integer and float fields:
#
# if integer != 0: it is integer value
# else if real != 0.0: it is float value
# else: it is zero.

int64 integer
float64 real
"""
  __slots__ = ['param_id','value']
  _slot_types = ['string','mavros_msgs/ParamValue']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       param_id,value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParamSetRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.param_id is None:
        self.param_id = ''
      if self.value is None:
        self.value = mavros_msgs.msg.ParamValue()
    else:
      self.param_id = ''
      self.value = mavros_msgs.msg.ParamValue()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.param_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_qd().pack(_x.value.integer, _x.value.real))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.value is None:
        self.value = mavros_msgs.msg.ParamValue()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.param_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.param_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.value.integer, _x.value.real,) = _get_struct_qd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.param_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_qd().pack(_x.value.integer, _x.value.real))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.value is None:
        self.value = mavros_msgs.msg.ParamValue()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.param_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.param_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.value.integer, _x.value.real,) = _get_struct_qd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_qd = None
def _get_struct_qd():
    global _struct_qd
    if _struct_qd is None:
        _struct_qd = struct.Struct("<qd")
    return _struct_qd
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/ParamSetResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mavros_msgs.msg

class ParamSetResponse(genpy.Message):
  _md5sum = "790d22b22b9dbf32a8e8d55578e25477"
  _type = "mavros_msgs/ParamSetResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
mavros_msgs/ParamValue value


================================================================================
MSG: mavros_msgs/ParamValue
# Parameter value storage type.
#
# Integer and float fields:
#
# if integer != 0: it is integer value
# else if real != 0.0: it is float value
# else: it is zero.

int64 integer
float64 real
"""
  __slots__ = ['success','value']
  _slot_types = ['bool','mavros_msgs/ParamValue']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParamSetResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.value is None:
        self.value = mavros_msgs.msg.ParamValue()
    else:
      self.success = False
      self.value = mavros_msgs.msg.ParamValue()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bqd().pack(_x.success, _x.value.integer, _x.value.real))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.value is None:
        self.value = mavros_msgs.msg.ParamValue()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.success, _x.value.integer, _x.value.real,) = _get_struct_Bqd().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bqd().pack(_x.success, _x.value.integer, _x.value.real))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.value is None:
        self.value = mavros_msgs.msg.ParamValue()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.success, _x.value.integer, _x.value.real,) = _get_struct_Bqd().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bqd = None
def _get_struct_Bqd():
    global _struct_Bqd
    if _struct_Bqd is None:
        _struct_Bqd = struct.Struct("<Bqd")
    return _struct_Bqd
class ParamSet(object):
  _type          = 'mavros_msgs/ParamSet'
  _md5sum = 'c423cafb898fff374cbe8530ecd4d285'
  _request_class  = ParamSetRequest
  _response_class = ParamSetResponse
