//#line 2 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the global_planner package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __global_planner__GLOBALPLANNERNODECONFIG_H__
#define __global_planner__GLOBALPLANNERNODECONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace global_planner
{
  class GlobalPlannerNodeConfigStatics;

  class GlobalPlannerNodeConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(GlobalPlannerNodeConfig &config, const GlobalPlannerNodeConfig &max, const GlobalPlannerNodeConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const GlobalPlannerNodeConfig &config1, const GlobalPlannerNodeConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, GlobalPlannerNodeConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const GlobalPlannerNodeConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, GlobalPlannerNodeConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const GlobalPlannerNodeConfig &config) const = 0;
      virtual void getValue(const GlobalPlannerNodeConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T GlobalPlannerNodeConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T GlobalPlannerNodeConfig::* field;

      virtual void clamp(GlobalPlannerNodeConfig &config, const GlobalPlannerNodeConfig &max, const GlobalPlannerNodeConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const GlobalPlannerNodeConfig &config1, const GlobalPlannerNodeConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, GlobalPlannerNodeConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const GlobalPlannerNodeConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, GlobalPlannerNodeConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const GlobalPlannerNodeConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const GlobalPlannerNodeConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, GlobalPlannerNodeConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, GlobalPlannerNodeConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<GlobalPlannerNodeConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(GlobalPlannerNodeConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("min_altitude_"==(*_i)->name){min_altitude_ = boost::any_cast<int>(val);}
        if("max_altitude_"==(*_i)->name){max_altitude_ = boost::any_cast<int>(val);}
        if("max_cell_risk_"==(*_i)->name){max_cell_risk_ = boost::any_cast<double>(val);}
        if("smooth_factor_"==(*_i)->name){smooth_factor_ = boost::any_cast<double>(val);}
        if("vert_to_hor_cost_"==(*_i)->name){vert_to_hor_cost_ = boost::any_cast<double>(val);}
        if("risk_factor_"==(*_i)->name){risk_factor_ = boost::any_cast<double>(val);}
        if("neighbor_risk_flow_"==(*_i)->name){neighbor_risk_flow_ = boost::any_cast<double>(val);}
        if("explore_penalty_"==(*_i)->name){explore_penalty_ = boost::any_cast<double>(val);}
        if("up_cost_"==(*_i)->name){up_cost_ = boost::any_cast<double>(val);}
        if("down_cost_"==(*_i)->name){down_cost_ = boost::any_cast<double>(val);}
        if("search_time_"==(*_i)->name){search_time_ = boost::any_cast<double>(val);}
        if("min_overestimate_factor_"==(*_i)->name){min_overestimate_factor_ = boost::any_cast<double>(val);}
        if("max_overestimate_factor_"==(*_i)->name){max_overestimate_factor_ = boost::any_cast<double>(val);}
        if("risk_threshold_risk_based_speedup_"==(*_i)->name){risk_threshold_risk_based_speedup_ = boost::any_cast<double>(val);}
        if("default_speed_"==(*_i)->name){default_speed_ = boost::any_cast<double>(val);}
        if("max_speed_"==(*_i)->name){max_speed_ = boost::any_cast<double>(val);}
        if("max_iterations_"==(*_i)->name){max_iterations_ = boost::any_cast<int>(val);}
        if("goal_must_be_free_"==(*_i)->name){goal_must_be_free_ = boost::any_cast<bool>(val);}
        if("use_current_yaw_"==(*_i)->name){use_current_yaw_ = boost::any_cast<bool>(val);}
        if("use_risk_heuristics_"==(*_i)->name){use_risk_heuristics_ = boost::any_cast<bool>(val);}
        if("use_speedup_heuristics_"==(*_i)->name){use_speedup_heuristics_ = boost::any_cast<bool>(val);}
        if("use_risk_based_speedup_"==(*_i)->name){use_risk_based_speedup_ = boost::any_cast<bool>(val);}
        if("clicked_goal_alt_"==(*_i)->name){clicked_goal_alt_ = boost::any_cast<double>(val);}
        if("clicked_goal_radius_"==(*_i)->name){clicked_goal_radius_ = boost::any_cast<double>(val);}
        if("simplify_iterations_"==(*_i)->name){simplify_iterations_ = boost::any_cast<int>(val);}
        if("simplify_margin_"==(*_i)->name){simplify_margin_ = boost::any_cast<double>(val);}
        if("CELL_SCALE"==(*_i)->name){CELL_SCALE = boost::any_cast<double>(val);}
        if("SPEEDNODE_RADIUS"==(*_i)->name){SPEEDNODE_RADIUS = boost::any_cast<double>(val);}
        if("default_node_type_"==(*_i)->name){default_node_type_ = boost::any_cast<std::string>(val);}
      }
    }

    int min_altitude_;
int max_altitude_;
double max_cell_risk_;
double smooth_factor_;
double vert_to_hor_cost_;
double risk_factor_;
double neighbor_risk_flow_;
double explore_penalty_;
double up_cost_;
double down_cost_;
double search_time_;
double min_overestimate_factor_;
double max_overestimate_factor_;
double risk_threshold_risk_based_speedup_;
double default_speed_;
double max_speed_;
int max_iterations_;
bool goal_must_be_free_;
bool use_current_yaw_;
bool use_risk_heuristics_;
bool use_speedup_heuristics_;
bool use_risk_based_speedup_;
double clicked_goal_alt_;
double clicked_goal_radius_;
int simplify_iterations_;
double simplify_margin_;
double CELL_SCALE;
double SPEEDNODE_RADIUS;
std::string default_node_type_;

    bool state;
    std::string name;

    
}groups;



//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int min_altitude_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int max_altitude_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_cell_risk_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double smooth_factor_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double vert_to_hor_cost_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double risk_factor_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double neighbor_risk_flow_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double explore_penalty_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double up_cost_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double down_cost_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double search_time_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double min_overestimate_factor_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_overestimate_factor_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double risk_threshold_risk_based_speedup_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double default_speed_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_speed_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int max_iterations_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool goal_must_be_free_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool use_current_yaw_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool use_risk_heuristics_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool use_speedup_heuristics_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool use_risk_based_speedup_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double clicked_goal_alt_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double clicked_goal_radius_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int simplify_iterations_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double simplify_margin_;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double CELL_SCALE;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double SPEEDNODE_RADIUS;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string default_node_type_;
//#line 228 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("GlobalPlannerNodeConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const GlobalPlannerNodeConfig &__max__ = __getMax__();
      const GlobalPlannerNodeConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const GlobalPlannerNodeConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const GlobalPlannerNodeConfig &__getDefault__();
    static const GlobalPlannerNodeConfig &__getMax__();
    static const GlobalPlannerNodeConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const GlobalPlannerNodeConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void GlobalPlannerNodeConfig::ParamDescription<std::string>::clamp(GlobalPlannerNodeConfig &config, const GlobalPlannerNodeConfig &max, const GlobalPlannerNodeConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class GlobalPlannerNodeConfigStatics
  {
    friend class GlobalPlannerNodeConfig;

    GlobalPlannerNodeConfigStatics()
    {
GlobalPlannerNodeConfig::GroupDescription<GlobalPlannerNodeConfig::DEFAULT, GlobalPlannerNodeConfig> Default("Default", "", 0, 0, true, &GlobalPlannerNodeConfig::groups);
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_altitude_ = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_altitude_ = 10;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_altitude_ = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<int>("min_altitude_", "int", 0, "Minimum planned altitude", "", &GlobalPlannerNodeConfig::min_altitude_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<int>("min_altitude_", "int", 0, "Minimum planned altitude", "", &GlobalPlannerNodeConfig::min_altitude_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_altitude_ = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_altitude_ = 50;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_altitude_ = 10;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<int>("max_altitude_", "int", 0, "Maximum planned altitude", "", &GlobalPlannerNodeConfig::max_altitude_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<int>("max_altitude_", "int", 0, "Maximum planned altitude", "", &GlobalPlannerNodeConfig::max_altitude_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_cell_risk_ = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_cell_risk_ = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_cell_risk_ = 0.2;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("max_cell_risk_", "double", 0, "Maximum risk allowed per cells", "", &GlobalPlannerNodeConfig::max_cell_risk_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("max_cell_risk_", "double", 0, "Maximum risk allowed per cells", "", &GlobalPlannerNodeConfig::max_cell_risk_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.smooth_factor_ = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.smooth_factor_ = 100.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.smooth_factor_ = 20.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("smooth_factor_", "double", 0, "Cost of turning", "", &GlobalPlannerNodeConfig::smooth_factor_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("smooth_factor_", "double", 0, "Cost of turning", "", &GlobalPlannerNodeConfig::smooth_factor_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.vert_to_hor_cost_ = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.vert_to_hor_cost_ = 10.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.vert_to_hor_cost_ = 3.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("vert_to_hor_cost_", "double", 0, "Cost of changing between horizontal and vertical direction", "", &GlobalPlannerNodeConfig::vert_to_hor_cost_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("vert_to_hor_cost_", "double", 0, "Cost of changing between horizontal and vertical direction", "", &GlobalPlannerNodeConfig::vert_to_hor_cost_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.risk_factor_ = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.risk_factor_ = 1000.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.risk_factor_ = 500.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("risk_factor_", "double", 0, "Cost of crashing", "", &GlobalPlannerNodeConfig::risk_factor_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("risk_factor_", "double", 0, "Cost of crashing", "", &GlobalPlannerNodeConfig::risk_factor_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.neighbor_risk_flow_ = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.neighbor_risk_flow_ = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.neighbor_risk_flow_ = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("neighbor_risk_flow_", "double", 0, "The effect of the risk of neighboring cells", "", &GlobalPlannerNodeConfig::neighbor_risk_flow_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("neighbor_risk_flow_", "double", 0, "The effect of the risk of neighboring cells", "", &GlobalPlannerNodeConfig::neighbor_risk_flow_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.explore_penalty_ = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.explore_penalty_ = 0.01;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.explore_penalty_ = 0.005;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("explore_penalty_", "double", 0, "The cost of unexplored space", "", &GlobalPlannerNodeConfig::explore_penalty_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("explore_penalty_", "double", 0, "The cost of unexplored space", "", &GlobalPlannerNodeConfig::explore_penalty_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.up_cost_ = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.up_cost_ = 10.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.up_cost_ = 5.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("up_cost_", "double", 0, "Cost of ascending 1m", "", &GlobalPlannerNodeConfig::up_cost_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("up_cost_", "double", 0, "Cost of ascending 1m", "", &GlobalPlannerNodeConfig::up_cost_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.down_cost_ = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.down_cost_ = 10.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.down_cost_ = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("down_cost_", "double", 0, "Cost of descending 1m", "", &GlobalPlannerNodeConfig::down_cost_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("down_cost_", "double", 0, "Cost of descending 1m", "", &GlobalPlannerNodeConfig::down_cost_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.search_time_ = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.search_time_ = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.search_time_ = 0.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("search_time_", "double", 0, "Time it takes to return a new path", "", &GlobalPlannerNodeConfig::search_time_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("search_time_", "double", 0, "Time it takes to return a new path", "", &GlobalPlannerNodeConfig::search_time_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_overestimate_factor_ = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_overestimate_factor_ = 1.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_overestimate_factor_ = 1.03;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("min_overestimate_factor_", "double", 0, "The minimum overestimation for heuristics", "", &GlobalPlannerNodeConfig::min_overestimate_factor_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("min_overestimate_factor_", "double", 0, "The minimum overestimation for heuristics", "", &GlobalPlannerNodeConfig::min_overestimate_factor_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_overestimate_factor_ = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_overestimate_factor_ = 5.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_overestimate_factor_ = 2.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("max_overestimate_factor_", "double", 0, "The minimum overestimation for heuristics", "", &GlobalPlannerNodeConfig::max_overestimate_factor_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("max_overestimate_factor_", "double", 0, "The minimum overestimation for heuristics", "", &GlobalPlannerNodeConfig::max_overestimate_factor_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.risk_threshold_risk_based_speedup_ = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.risk_threshold_risk_based_speedup_ = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.risk_threshold_risk_based_speedup_ = 0.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("risk_threshold_risk_based_speedup_", "double", 0, "Risk threshold value for using risk based speedup algorithm", "", &GlobalPlannerNodeConfig::risk_threshold_risk_based_speedup_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("risk_threshold_risk_based_speedup_", "double", 0, "Risk threshold value for using risk based speedup algorithm", "", &GlobalPlannerNodeConfig::risk_threshold_risk_based_speedup_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.default_speed_ = 0.1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.default_speed_ = 10.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.default_speed_ = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("default_speed_", "double", 0, "Default speed of flight", "", &GlobalPlannerNodeConfig::default_speed_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("default_speed_", "double", 0, "Default speed of flight", "", &GlobalPlannerNodeConfig::default_speed_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_speed_ = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_speed_ = 10.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_speed_ = 3.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("max_speed_", "double", 0, "Maximum speed of flight", "", &GlobalPlannerNodeConfig::max_speed_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("max_speed_", "double", 0, "Maximum speed of flight", "", &GlobalPlannerNodeConfig::max_speed_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_iterations_ = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_iterations_ = 10000;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_iterations_ = 2000;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<int>("max_iterations_", "int", 0, "Maximum number of iterations", "", &GlobalPlannerNodeConfig::max_iterations_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<int>("max_iterations_", "int", 0, "Maximum number of iterations", "", &GlobalPlannerNodeConfig::max_iterations_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.goal_must_be_free_ = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.goal_must_be_free_ = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.goal_must_be_free_ = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<bool>("goal_must_be_free_", "bool", 0, "Don't bother trying to find a path if the exact goal is occupied", "", &GlobalPlannerNodeConfig::goal_must_be_free_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<bool>("goal_must_be_free_", "bool", 0, "Don't bother trying to find a path if the exact goal is occupied", "", &GlobalPlannerNodeConfig::goal_must_be_free_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_current_yaw_ = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_current_yaw_ = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_current_yaw_ = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<bool>("use_current_yaw_", "bool", 0, "The current yaw affects the pathfinding", "", &GlobalPlannerNodeConfig::use_current_yaw_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<bool>("use_current_yaw_", "bool", 0, "The current yaw affects the pathfinding", "", &GlobalPlannerNodeConfig::use_current_yaw_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_risk_heuristics_ = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_risk_heuristics_ = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_risk_heuristics_ = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<bool>("use_risk_heuristics_", "bool", 0, "Use non underestimating heuristics for risk", "", &GlobalPlannerNodeConfig::use_risk_heuristics_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<bool>("use_risk_heuristics_", "bool", 0, "Use non underestimating heuristics for risk", "", &GlobalPlannerNodeConfig::use_risk_heuristics_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_speedup_heuristics_ = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_speedup_heuristics_ = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_speedup_heuristics_ = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<bool>("use_speedup_heuristics_", "bool", 0, "Use non underestimating heuristics for speedup", "", &GlobalPlannerNodeConfig::use_speedup_heuristics_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<bool>("use_speedup_heuristics_", "bool", 0, "Use non underestimating heuristics for speedup", "", &GlobalPlannerNodeConfig::use_speedup_heuristics_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_risk_based_speedup_ = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_risk_based_speedup_ = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_risk_based_speedup_ = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<bool>("use_risk_based_speedup_", "bool", 0, "Use risk based speedup", "", &GlobalPlannerNodeConfig::use_risk_based_speedup_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<bool>("use_risk_based_speedup_", "bool", 0, "Use risk based speedup", "", &GlobalPlannerNodeConfig::use_risk_based_speedup_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.clicked_goal_alt_ = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.clicked_goal_alt_ = 10.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.clicked_goal_alt_ = 3.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("clicked_goal_alt_", "double", 0, "The altitude of clicked goals", "", &GlobalPlannerNodeConfig::clicked_goal_alt_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("clicked_goal_alt_", "double", 0, "The altitude of clicked goals", "", &GlobalPlannerNodeConfig::clicked_goal_alt_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.clicked_goal_radius_ = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.clicked_goal_radius_ = 10.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.clicked_goal_radius_ = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("clicked_goal_radius_", "double", 0, "Minimum allowed distance from path end to goal", "", &GlobalPlannerNodeConfig::clicked_goal_radius_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("clicked_goal_radius_", "double", 0, "Minimum allowed distance from path end to goal", "", &GlobalPlannerNodeConfig::clicked_goal_radius_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.simplify_iterations_ = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.simplify_iterations_ = 100;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.simplify_iterations_ = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<int>("simplify_iterations_", "int", 0, "Maximum number of iterations to simplify a path", "", &GlobalPlannerNodeConfig::simplify_iterations_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<int>("simplify_iterations_", "int", 0, "Maximum number of iterations to simplify a path", "", &GlobalPlannerNodeConfig::simplify_iterations_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.simplify_margin_ = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.simplify_margin_ = 2.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.simplify_margin_ = 1.01;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("simplify_margin_", "double", 0, "The allowed cost increase for simplifying an edge", "", &GlobalPlannerNodeConfig::simplify_margin_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("simplify_margin_", "double", 0, "The allowed cost increase for simplifying an edge", "", &GlobalPlannerNodeConfig::simplify_margin_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.CELL_SCALE = 0.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.CELL_SCALE = 2.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.CELL_SCALE = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("CELL_SCALE", "double", 2, "Size of a cell, should be divisable by the OctoMap resolution", "", &GlobalPlannerNodeConfig::CELL_SCALE)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("CELL_SCALE", "double", 2, "Size of a cell, should be divisable by the OctoMap resolution", "", &GlobalPlannerNodeConfig::CELL_SCALE)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.SPEEDNODE_RADIUS = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.SPEEDNODE_RADIUS = 10.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.SPEEDNODE_RADIUS = 5.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("SPEEDNODE_RADIUS", "double", 4, "Maximum length of edge between two Cells", "", &GlobalPlannerNodeConfig::SPEEDNODE_RADIUS)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<double>("SPEEDNODE_RADIUS", "double", 4, "Maximum length of edge between two Cells", "", &GlobalPlannerNodeConfig::SPEEDNODE_RADIUS)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.default_node_type_ = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.default_node_type_ = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.default_node_type_ = "SpeedNode";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<std::string>("default_node_type_", "str", 4, "Change search mode", "{'enum_description': 'Change search mode', 'enum': [{'srcline': 44, 'description': 'Normal node', 'srcfile': '/home/rishabh/catkin_ws/src/avoidance/global_planner/cfg/GlobalPlannerNode.cfg', 'cconsttype': 'const char * const', 'value': 'Node', 'ctype': 'std::string', 'type': 'str', 'name': 'Node'}, {'srcline': 45, 'description': 'No smooth cost', 'srcfile': '/home/rishabh/catkin_ws/src/avoidance/global_planner/cfg/GlobalPlannerNode.cfg', 'cconsttype': 'const char * const', 'value': 'NodeWithoutSmooth', 'ctype': 'std::string', 'type': 'str', 'name': 'NodeWithoutSmooth'}, {'srcline': 46, 'description': 'Search with speed', 'srcfile': '/home/rishabh/catkin_ws/src/avoidance/global_planner/cfg/GlobalPlannerNode.cfg', 'cconsttype': 'const char * const', 'value': 'SpeedNode', 'ctype': 'std::string', 'type': 'str', 'name': 'SpeedNode'}]}", &GlobalPlannerNodeConfig::default_node_type_)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr(new GlobalPlannerNodeConfig::ParamDescription<std::string>("default_node_type_", "str", 4, "Change search mode", "{'enum_description': 'Change search mode', 'enum': [{'srcline': 44, 'description': 'Normal node', 'srcfile': '/home/rishabh/catkin_ws/src/avoidance/global_planner/cfg/GlobalPlannerNode.cfg', 'cconsttype': 'const char * const', 'value': 'Node', 'ctype': 'std::string', 'type': 'str', 'name': 'Node'}, {'srcline': 45, 'description': 'No smooth cost', 'srcfile': '/home/rishabh/catkin_ws/src/avoidance/global_planner/cfg/GlobalPlannerNode.cfg', 'cconsttype': 'const char * const', 'value': 'NodeWithoutSmooth', 'ctype': 'std::string', 'type': 'str', 'name': 'NodeWithoutSmooth'}, {'srcline': 46, 'description': 'Search with speed', 'srcfile': '/home/rishabh/catkin_ws/src/avoidance/global_planner/cfg/GlobalPlannerNode.cfg', 'cconsttype': 'const char * const', 'value': 'SpeedNode', 'ctype': 'std::string', 'type': 'str', 'name': 'SpeedNode'}]}", &GlobalPlannerNodeConfig::default_node_type_)));
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(GlobalPlannerNodeConfig::AbstractGroupDescriptionConstPtr(new GlobalPlannerNodeConfig::GroupDescription<GlobalPlannerNodeConfig::DEFAULT, GlobalPlannerNodeConfig>(Default)));
//#line 366 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<GlobalPlannerNodeConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<GlobalPlannerNodeConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    GlobalPlannerNodeConfig __max__;
    GlobalPlannerNodeConfig __min__;
    GlobalPlannerNodeConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const GlobalPlannerNodeConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static GlobalPlannerNodeConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &GlobalPlannerNodeConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const GlobalPlannerNodeConfig &GlobalPlannerNodeConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const GlobalPlannerNodeConfig &GlobalPlannerNodeConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const GlobalPlannerNodeConfig &GlobalPlannerNodeConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<GlobalPlannerNodeConfig::AbstractParamDescriptionConstPtr> &GlobalPlannerNodeConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<GlobalPlannerNodeConfig::AbstractGroupDescriptionConstPtr> &GlobalPlannerNodeConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const GlobalPlannerNodeConfigStatics *GlobalPlannerNodeConfig::__get_statics__()
  {
    const static GlobalPlannerNodeConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = GlobalPlannerNodeConfigStatics::get_instance();

    return statics;
  }

//#line 44 "/home/rishabh/catkin_ws/src/avoidance/global_planner/cfg/GlobalPlannerNode.cfg"
      const char * const GlobalPlannerNode_Node = "Node";
//#line 45 "/home/rishabh/catkin_ws/src/avoidance/global_planner/cfg/GlobalPlannerNode.cfg"
      const char * const GlobalPlannerNode_NodeWithoutSmooth = "NodeWithoutSmooth";
//#line 46 "/home/rishabh/catkin_ws/src/avoidance/global_planner/cfg/GlobalPlannerNode.cfg"
      const char * const GlobalPlannerNode_SpeedNode = "SpeedNode";
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __GLOBALPLANNERNODERECONFIGURATOR_H__
