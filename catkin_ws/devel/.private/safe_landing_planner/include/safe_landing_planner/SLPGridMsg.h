// Generated by gencpp from file safe_landing_planner/SLPGridMsg.msg
// DO NOT EDIT!


#ifndef SAFE_LANDING_PLANNER_MESSAGE_SLPGRIDMSG_H
#define SAFE_LANDING_PLANNER_MESSAGE_SLPGRIDMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Int64MultiArray.h>
#include <std_msgs/Int64MultiArray.h>
#include <geometry_msgs/Vector3.h>

namespace safe_landing_planner
{
template <class ContainerAllocator>
struct SLPGridMsg_
{
  typedef SLPGridMsg_<ContainerAllocator> Type;

  SLPGridMsg_()
    : header()
    , mean()
    , std_dev()
    , counter()
    , land()
    , grid_size(0.0)
    , cell_size(0.0)
    , curr_pos_index()  {
    }
  SLPGridMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mean(_alloc)
    , std_dev(_alloc)
    , counter(_alloc)
    , land(_alloc)
    , grid_size(0.0)
    , cell_size(0.0)
    , curr_pos_index(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _mean_type;
  _mean_type mean;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _std_dev_type;
  _std_dev_type std_dev;

   typedef  ::std_msgs::Int64MultiArray_<ContainerAllocator>  _counter_type;
  _counter_type counter;

   typedef  ::std_msgs::Int64MultiArray_<ContainerAllocator>  _land_type;
  _land_type land;

   typedef double _grid_size_type;
  _grid_size_type grid_size;

   typedef double _cell_size_type;
  _cell_size_type cell_size;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _curr_pos_index_type;
  _curr_pos_index_type curr_pos_index;





  typedef boost::shared_ptr< ::safe_landing_planner::SLPGridMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::safe_landing_planner::SLPGridMsg_<ContainerAllocator> const> ConstPtr;

}; // struct SLPGridMsg_

typedef ::safe_landing_planner::SLPGridMsg_<std::allocator<void> > SLPGridMsg;

typedef boost::shared_ptr< ::safe_landing_planner::SLPGridMsg > SLPGridMsgPtr;
typedef boost::shared_ptr< ::safe_landing_planner::SLPGridMsg const> SLPGridMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::safe_landing_planner::SLPGridMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::safe_landing_planner::SLPGridMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::safe_landing_planner::SLPGridMsg_<ContainerAllocator1> & lhs, const ::safe_landing_planner::SLPGridMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mean == rhs.mean &&
    lhs.std_dev == rhs.std_dev &&
    lhs.counter == rhs.counter &&
    lhs.land == rhs.land &&
    lhs.grid_size == rhs.grid_size &&
    lhs.cell_size == rhs.cell_size &&
    lhs.curr_pos_index == rhs.curr_pos_index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::safe_landing_planner::SLPGridMsg_<ContainerAllocator1> & lhs, const ::safe_landing_planner::SLPGridMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace safe_landing_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::safe_landing_planner::SLPGridMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::safe_landing_planner::SLPGridMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::safe_landing_planner::SLPGridMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::safe_landing_planner::SLPGridMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::safe_landing_planner::SLPGridMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::safe_landing_planner::SLPGridMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::safe_landing_planner::SLPGridMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac7dcafe4e3af4e98f04adc7a210b7be";
  }

  static const char* value(const ::safe_landing_planner::SLPGridMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac7dcafe4e3af4e9ULL;
  static const uint64_t static_value2 = 0x8f04adc7a210b7beULL;
};

template<class ContainerAllocator>
struct DataType< ::safe_landing_planner::SLPGridMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "safe_landing_planner/SLPGridMsg";
  }

  static const char* value(const ::safe_landing_planner::SLPGridMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::safe_landing_planner::SLPGridMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"std_msgs/Float64MultiArray mean\n"
"std_msgs/Float64MultiArray std_dev\n"
"std_msgs/Int64MultiArray counter\n"
"std_msgs/Int64MultiArray land\n"
"\n"
"float64 grid_size\n"
"float64 cell_size\n"
"\n"
"geometry_msgs/Vector3 curr_pos_index\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float64[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
"================================================================================\n"
"MSG: std_msgs/Int64MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"int64[]           data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::safe_landing_planner::SLPGridMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::safe_landing_planner::SLPGridMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mean);
      stream.next(m.std_dev);
      stream.next(m.counter);
      stream.next(m.land);
      stream.next(m.grid_size);
      stream.next(m.cell_size);
      stream.next(m.curr_pos_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SLPGridMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::safe_landing_planner::SLPGridMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::safe_landing_planner::SLPGridMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mean: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.mean);
    s << indent << "std_dev: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.std_dev);
    s << indent << "counter: ";
    s << std::endl;
    Printer< ::std_msgs::Int64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.counter);
    s << indent << "land: ";
    s << std::endl;
    Printer< ::std_msgs::Int64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.land);
    s << indent << "grid_size: ";
    Printer<double>::stream(s, indent + "  ", v.grid_size);
    s << indent << "cell_size: ";
    Printer<double>::stream(s, indent + "  ", v.cell_size);
    s << indent << "curr_pos_index: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.curr_pos_index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAFE_LANDING_PLANNER_MESSAGE_SLPGRIDMSG_H
